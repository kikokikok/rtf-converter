[package]
name = "rtf-converter"
version = "0.1.0"
description = "Rust based RTF converter API"
keywords = []
categories = []
include = ["/src", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
license = "Apache-2.0 or MIT"
readme = "README.md"
edition = "2021"

documentation = "https://docs.rs/rtf-converter"
repository = "https://github.com/kikokikok/rtf-converter/tree/main/rtf-converter"
authors = ["Christian KLAT <christian.klat@gmail.com>"]
default-run = "rtf-converter-app"

[lib]
path = "src/lib.rs"
doctest = true

[[bin]]
name = "rtf-converter-app"
path = "src/main.rs"
doc = false

[[bin]]
name = "openapi"
path = "src/bin/openapi.rs"
test = false
doc = false
bench = false

[dependencies]
ansi_term = { version = "0.12", optional = true, default-features = false }
anyhow = { version = "1.0", features = ["backtrace"] }
async-trait = "0.1"
axum = { version = "0.6.18", features = ["headers", "multipart"] }
axum-tracing-opentelemetry = { version = "0.12.0"}
init-tracing-opentelemetry = { version = "0.12.0", features = [
	"otlp",
	"tracing_subscriber_ext",
] }
base64 = "0.21"
chrono = { version = "0.4", default-features = false, features = ["clock", "serde"] }
config = "0.13"
config-secret = "0.1.0"
console-subscriber = { version = "0.1", default-features = false, features = [ "parking_lot" ], optional = true }
const_format = "0.2"
futures = "0.3"
headers = "0.3"
http = "0.2"
http-serde = "1.1"
hyper = "0.14"
metrics = "0.21.1"
metrics-exporter-prometheus = "0.12.1"
metrics-util = { version = "0.15.1", default-features = true }
mime = "0.3"
num_cpus = "1.0"
once_cell = "1.18"
openssl = { version = "0.10", features = ["vendored"], default-features = false }
opentelemetry = { version = "0.19.0", features = ["rt-tokio", "trace"] }
opentelemetry-otlp = { version = "0.12.0", features = ["metrics", "grpc-tonic", "tls-roots"], default-features = false }
opentelemetry-semantic-conventions = "0.11.0"
parking_lot = "0.12"
proptest = { version = "1.1", optional = true }
reqwest = { version = "0.11", features = ["json"] }
reqwest-middleware = "0.2"
reqwest-retry = "0.2"
reqwest-tracing = { version = "0.4", features = ["opentelemetry_0_17"] }
retry-policies = "0.1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_path_to_error = "0.1"
serde_with = { version = "3.0", features = ["default", "chrono_0_4"] }
sysinfo = "0.29.5"
task-local-extensions = "0.1"
thiserror = "1.0"
time = { version = "0.3", features = ["serde-well-known", "serde-human-readable"] }
tokio = { version = "1.26", features = ["full", "parking_lot"] }
redis = { version = "0.23.0", features = ["tokio-comp"] }
rtf-grimoire = "0.2.1"
lazy_static = "1.4.0"
encoding_rs = "0.8.32"
codepage = "0.1.1"
string-builder = "0.2.0"
## Tied to opentelemetry-otlp dependency
tonic = { version = "^0.8.0", features = ["tls"]}
tower = "0.4"
tower-http = { version = "0.4", features = ["catch-panic", "request-id", "sensitive-headers", "timeout", "trace", "util"] }
tracing = "0.1"
tracing-appender = "0.2"
tracing-opentelemetry = "0.19.0"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json", "parking_lot", "registry"] }
ulid = { version = "1.0", features = ["serde"] }
url = "2.3"
utoipa = { version = "3.3.0", features = ["uuid", "axum_extras"] }
utoipa-swagger-ui = { version = "3.1", features = ["axum"] }
utoipa-gen = "3.3.0"
axum_typed_multipart = "0.5.1"
axum-macros = "0.3.8"
sqlx = { version = "0.7.1", features = ["runtime-tokio-rustls", "postgres", "uuid", "chrono", ] }
sqlxmq = "0.4.1"
validator = { version = "0.16.1", features = ["derive"] }
dotenv = "0.15.0"
humantime = "2.1.0"
derive_more = "0.99.17"

[dependencies.uuid]
version = "1.4.0"
features = [
	"v4",                # Lets you generate random UUIDs
	"fast-rng",          # Use a faster (but still sufficiently random) RNG
	"macro-diagnostics", # Enable better diagnostics for compile-time UUIDs
	"serde",
]

[dev-dependencies]
assert-json-diff = "2.0"
criterion = "0.5.1"
proptest = "1.1"
rsa = { version = "0.9.2" }
tokio-test = "0.4"
wiremock = "0.5"
mockall = "0.11.4"

[features]
ansi-logs = ["ansi_term"]
console = ["console-subscriber"]
default = []
test_utils = ["proptest"]

[package.metadata.docs.rs]
all-features = true
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]
